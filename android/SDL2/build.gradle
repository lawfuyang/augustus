apply plugin: 'com.android.library'

def findLibrary(String prefix) {
    def extPath = project.file("../../ext/SDL2")
    def files = extPath.list({f, name -> name.startsWith("$prefix-")})
    if (files.length == 0) {
        throw new IllegalStateException("$prefix source not found, please extract the source to a subdirectory named '$prefix-2.0.*' in: " + extPath.absolutePath)
    } else if (files.length > 1) {
        throw new IllegalStateException("Multiple $prefix source folders found, please make sure there is only one folder named '$prefix-2.0.*' in: " + extPath.absolutePath)
    }
    return new File(extPath, files[0])
}

task findSDL2 {
    if (rootProject.ext.usingAAR) {
        println 'External AAR found - not building SDL'
        return;
    }
    println 'External AAR not found - building SDL'
    def path = findLibrary("SDL2")
    // Copy SDL Android sources, since Android Studio no longer
    // appears to recognize source sets outside the project root
    copy {
        from new File(path, "android-project/app/src/main/java")
        into new File(projectDir, "src/main/java")
    }
    ext.sourcePath = path
    ext.includePath = new File(path, "include")
}

task findSDL2Mixer {
    if (rootProject.ext.usingAAR) {
        return;
    }
    def path = findLibrary("SDL2_mixer")
    ext.sourcePath = path
    ext.includePath = new File(path, "include")
}

android {
    compileSdkVersion 33
    buildToolsVersion "34.0.0"
    ndkVersion "25.2.9519653"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            ndkBuild {
                arguments 'SUPPORT_WAVPACK=false'
            }
        }
    }
    buildFeatures {
        prefabPublishing true
    }
    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        ndkBuild {
            if (!rootProject.ext.usingAAR) {
                path '../../ext/SDL2/Android.mk'
            } else {
                path 'Android.mk'
            }
        }
    }
    prefab {
        SDL2 {
            if (!rootProject.ext.usingAAR) {
                headers "${findSDL2.includePath}"
            } else {
                headerOnly = true
            }
        }
        SDL2_mixer {
            if (!rootProject.ext.usingAAR) {
                headers "${findSDL2Mixer.includePath}"
            } else {
                headerOnly = true
            }
        }
    }
    namespace 'com.github.Keriew.augustus.sdl2'
}

repositories {
    google()
    mavenCentral()
}
